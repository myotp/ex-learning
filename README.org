* CUDA backend
export XLA_TARGET=cuda120
export MIX_ENV=cuda
mix deps.get
mix deps.compile
iex -S mix

* Nx
t = Nx.tensor([ [1,2,3], [4,5,6] ], type: {:u, 32}, names: [:x, :y])
Nx.rank(t)
Nx.names(t)
Nx.type(t)

Nx.broadcast(999, {2, 4})
Nx.new_axis(t, 1, :baz)

* Nx Tips
# 建立一个全0的tensor
Nx.broadcast(0, {5, 4})

# 巧妙的one-hot encoded方法
labels = Nx.tensor([2,5]) |> Nx.new_axis(-1)
Nx.equal(labels, Nx.tensor(Enum.to_list(1..9)))

* Linear Regression
Pizza.run_without_bias()
Pizza.run_with_bias()

* Multi Regression
MultiPizza.run_without_bias()
MultiPizza.run_with_bias()

* Binary Classifier
Police.run()

* MNIST
wget https://storage.googleapis.com/cvdf-datasets/mnist/train-images-idx3-ubyte.gz
wget https://storage.googleapis.com/cvdf-datasets/mnist/train-labels-idx1-ubyte.gz
wget https://storage.googleapis.com/cvdf-datasets/mnist/t10k-images-idx3-ubyte.gz
wget https://storage.googleapis.com/cvdf-datasets/mnist/t10k-labels-idx1-ubyte.gz

# Simple binary classifier, is 5?
Digit5.run()

# classification
Mnist.run()

* Neural Network
MnistNN.run()

* Axon MNIST
Nx.tensor(Enum.to_list(1..40)) |> Nx.to_batched(4) |> Enum.split(3)

# 分步训练，得到模型params
model = MnistAxon.build_model()
trained_params = MnistAxon.train_model(model)
MnistAxon.test_model(model, trained_params)

# 使用模型
test_images = MnistAxon.load_test_images() |> Enum.take(1) |> hd()
Axon.predict(model, trained_params, test_images) |> Nx.argmax(axis: 1)

# 一次
iex -S mix
MnistAxon.run()

* Mnist CNN
model = MnistCnn.build_model()
trained_params = MnistCnn.train_model(model)
MnistCnn.test_model(model, trained_params)
test_images = MnistCnn.load_test_images() |> Enum.take(1) |> hd()
Axon.predict(model, trained_params, test_images) |> Nx.argmax(axis: 1)

* MNIST Results
iex -S mix
alias ExLearning.Projects
# regression classifier
Projects.MnistRegression.run()

# Neural Network
Projects.MnistNN.run()

# Axon - neural network
Projects.MnistAxon.run()

# Axon - CNN
Projects.MnistCnn.run()

| Module               | Accuracy | Project Module           |
|----------------------+----------+--------------------------|
| Core.MnistClassifier |    90.31 | Projects.MnistRegression |
| Core.NeuralNetwork   |    93.17 | Projects.MnistNN         |
| Axon.Mnist           |    97.49 | Projects.MnistAxon       |
| Axon.MnistCNN        |    98.62 | Projects.MnistCnn        |

* Mnist GANs
result = Projects.MnistGAN.run()
trained_params = result.step_state.generator.model_state
generator_model = ExLearning.Axon.MnistGAN.build_generator(100)

result.step_state.random_key
Nx.Random.normal(Nx.tensor([280889341, 3072476340], type: {:u, 32}), shape: {32, 100})

* XOR
Projects.XOR.run()
