* Axon model
# 简单Axon model guide 单node，怎么进去，怎么出来
input = Axon.input("data")
{init_fn, predict_fn} = Axon.build(input)
params = init_fn.(Nx.template({1, 8}, :f32), %{})
predict_fn.(params, Nx.iota({1, 8}))

# mnist例子
model = MnistAxon.build_model()
{init_fn, predict_fn} = Axon.build(model)
params = init_fn.(Nx.template({1, 784}, :f32), %{})
test_images = MnistAxon.load_test_images() |> Enum.take(1) |> hd()
predict_fn.(params, test_images) |> Nx.argmax(axis: 1)

trained_params = MnistAxon.train_model(model)
predict_fn.(trained_params, test_images) |> Nx.argmax(axis: 1)
Axon.predict(model, trained_params, test_images) |> Nx.argmax(axis: 1)

* Intro
# Build, train and use model
model = MnistAxon.build_model()
trained_params = MnistAxon.train_model(model)
Axon.predict(model, trained_params, test_images) |> Nx.argmax(axis: 1)

# Tensor: shape, rank, type
t = Nx.tensor([ [1,3,5], [2,4,6] ])
{2,3} = Nx.shape(t)
{:s, 64} = Nx.type(t)
2 = Nx.rank(t)

# slice
t = Nx.iota({8, 8})
Nx.slice(t, [3,4], [2,2])

# ReLU
Axon.Activations.relu(Nx.tensor([ -5, 0, 5 ]))

# braodcasting
t = Nx.broadcast(0, {2,3,2})
Nx.add(t, Nx.tensor([8,9]))
Nx.add(t, Nx.tensor([ [5,7],[8,9],[4,4] ]))
